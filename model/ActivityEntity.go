package model

import (
	"errors"
	"fmt"
	"os"
	"strconv"
	"strings"

	"gorm.io/gorm"

	"dancebox-admin-api/common/oss"
	"dancebox-admin-api/common/wechat"
	"dancebox-admin-api/global"
	"dancebox-admin-api/utils"
)

type ActivityEntity struct {
	BaseEntity
	Title          string    `gorm:"column:title" json:"title"`                             // 活动标题
	TypeID         int       `gorm:"column:type_id" json:"typeId"`                          // 活动类型Id
	LevelID        int       `gorm:"column:level_id" json:"levelId"`                        // 活动级别Id
	SponsorID      int       `gorm:"column:sponsor_id" json:"sponsorId"`                    // 主办方id
	ProvinceID     int       `gorm:"column:province_id" json:"provinceId"`                  // 省份Id
	CityID         int       `gorm:"column:city_id" json:"cityId"`                          // 城市Id
	Address        string    `gorm:"column:address" json:"address"`                         // 具体地址
	Location       string    `gorm:"column:location" json:"location"`                       // 具体地址经纬度
	StartTime      LocalTime `gorm:"column:start_time" json:"startTime"`                    // 开始时间
	EndTime        LocalTime `gorm:"column:end_time" json:"endTime"`                        // 结束时间
	Cover          string    `gorm:"column:cover" json:"cover"`                             // 封面图
	Dances         string    `gorm:"column:dances" json:"dances"`                           // 存放舞种的id数组字符串
	Content        string    `gorm:"column:content" json:"content"`                         // 活动具体内容
	Stage          int       `gorm:"column:stage;default:0;NOT NULL" json:"stage"`          // 阶段,0表示待审核,1表示审核通过,2表示拒绝
	Reason         string    `gorm:"column:reason" json:"reason"`                           // 拒绝原因
	Remark         string    `gorm:"column:remark" json:"remark"`                           // 拒绝原因备注
	IsTop          int       `gorm:"column:is_top;default:0" json:"isTop"`                  // 是否置顶,0是非置顶，1是置顶
	ActivityQrCode string    `gorm:"column:activity_qr_code" json:"activityQrCode"`         // 小程序对应的活动详情二维码
	FullAddress    string    `gorm:"column:full_address" json:"fullAddress"`                // 地址全称
	DancesStr      string    `gorm:"column:dances_str" json:"dancesStr"`                    // 舞蹈中文名字列表，多个用英文,拼接
	IsTicket       int       `gorm:"column:is_ticket;default:0;NOT NULL" json:"isTicket"`   // 是否开通票务
	LookCount      int       `gorm:"column:look_count;default:0" json:"lookCount"`          // 浏览数
	IDCardChecked  int       `gorm:"column:id_card_checked;default:0" json:"IDCardChecked"` // 是否需要验证身份证
	IsRefund       int       `gorm:"column:is_refund;default:0" json:"isRefund"`            // 是否开始退款,0表示不开启,1表示开启
}

func (a *ActivityEntity) TableName() string {
	return "activity"
}

// BeforeCreate 创建前的钩子函数
func (a *ActivityEntity) BeforeCreate(tx *gorm.DB) (err error) {
	if err := autoGenerateDancesStr(a, tx); err != nil {
		return err
	}
	if err := getActivityAddressByCityId(a, tx); err != nil {
		return err
	}
	if err := autoGenerateActivityQr(a, tx); err != nil {
		return err
	}
	return nil
}

// BeforeUpdate 更新数据的钩子函数
func (a *ActivityEntity) BeforeUpdate(tx *gorm.DB) (err error) {
	if err := autoGenerateDancesStr(a, tx); err != nil {
		return err
	}
	if err := getActivityAddressByCityId(a, tx); err != nil {
		return err
	}
	return nil
}

// 钩子函数处理舞蹈
func autoGenerateDancesStr(a *ActivityEntity, tx *gorm.DB) (err error) {
	// 根据当前的舞蹈id去查询舞蹈名称
	danceIdStrList := strings.Split(a.Dances, ",")
	var danceIdList []int
	for _, item := range danceIdStrList {
		if idInt, err := strconv.Atoi(item); err == nil {
			danceIdList = append(danceIdList, idInt)
		}
	}
	var danceEntityList []DanceEntity
	if result := tx.Where("id in (?)", danceIdList).Select([]string{"name"}).Find(&danceEntityList).Error; result != nil {
		global.Logger.Error("创建活动钩子里面根据舞蹈id查询活动失败")
	}
	var danceStrList []string
	for _, item := range danceEntityList {
		danceStrList = append(danceStrList, item.Name)
	}
	// 插入到数据库中
	a.DancesStr = strings.Join(danceStrList, ",")
	return nil
}

// getActivityAddressByCityId 根据城市id获取具体地址及经纬度
func getActivityAddressByCityId(a *ActivityEntity, tx *gorm.DB) (err error) {
	// 根据城市id查询地址信息
	var areaEntity AreaEntity
	if result := tx.Where("id=?", a.CityID).First(&areaEntity).Error; result != nil {
		global.Logger.Error("主办方表的钩子函数中查询地址失败" + result.Error())
		return
	}
	var addressList = strings.Split(areaEntity.MergerName, ",")
	// 去除第一个元素
	addressList = addressList[1:]
	var address = strings.Join(addressList, "") + a.Address
	a.FullAddress = address
	// 根据地址查询经纬度
	lng, lat := utils.GetLngLatByAddress(address)
	a.Location = fmt.Sprintf("%f,%f", lat, lng)
	return
}

// autoGenerateActivityQr 根据创建活动自动生成活动的二维码并且上传到阿里云
func autoGenerateActivityQr(a *ActivityEntity, tx *gorm.DB) (err error) {
	appId := global.ServerConfig.Wechat.AppId
	secret := global.ServerConfig.Wechat.Secret
	wechat1 := wechat.NewRegistryWechat(appId, secret)
	token := wechat1.GetAccessToken(global.ServerConfig.WechatPrefix.Wechat)
	if err2 := wechat.GenerationQrCode(token, int(a.ID)); err2 != nil {
		global.Logger.Error("根据活动id生成活动二维码失败")
		return errors.New("根据活动id生成活动二维码失败")
	}
	// 上传到阿里云
	allowArrayList := []string{".jpg", ".png", ".gif", ".jpeg"}
	var endpoint = global.ServerConfig.AliOss.EndpointUrl
	var accessKeyID = global.ServerConfig.AliOss.AccessKeyId
	var accessKeySecret = global.ServerConfig.AliOss.AccessKeySecret
	var bucketName = global.ServerConfig.AliOss.BucketName
	var bucketUrl = global.ServerConfig.AliOss.BucketUrl
	ossUploadFile := oss.NewRegisterOss(endpoint, accessKeyID, accessKeySecret, bucketName, bucketUrl, allowArrayList)
	file := fmt.Sprintf("%d.png", a.ID)
	// 区分测试和生产的存储目录
	var category = "activity_qr"
	isDev := utils.GetEnvInfo("IS_DEV")
	if isDev {
		category = "activity_qr_dev"
	}
	fileUrl, err := ossUploadFile.UploadLocalFile(category, false, file)
	if err != nil {
		fmt.Println("上传失败")
	}
	a.ActivityQrCode = fileUrl
	fmt.Println(fileUrl)
	if err := os.Remove(file); err != nil {
		fmt.Println("删除文件失败")
	}
	return nil
}
